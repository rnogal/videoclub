/**
 * This class has been generated by Fast Code Eclipse Plugin 
 * For more information please go to http://fast-code.sourceforge.net/
 * @author : rnogal
 * Created : 05/04/2013
 */

package com.video.dao.impl;

import java.util.Collections;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import com.video.dao.PeliculaDAO;
import com.video.dao.impl.HibernatePeliculaDAO.*;
import static org.hamcrest.CoreMatchers.*;
import org.junit.Test;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.junit.*;

import static org.junit.Assert.*;
import com.video.dao.impl.HibernatePeliculaDAO;
import com.video.utils.HibernateUtils;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import com.video.bus.Genero;
import com.video.bus.Pelicula;

public class HibernatePeliculaDAOTest {
	
	private static List<String> isans;
	private static Genero genero;
	private static HibernatePeliculaDAO hibernatePeliculaDAO;
	
	@BeforeClass
	public static void testStart() {
	   isans = Arrays.asList("1234", "2345", "3456", "4567", "5678", "6789", "7890");
	   hibernatePeliculaDAO = new HibernatePeliculaDAO();
	   Session session = HibernateUtils.getSession();
	   Transaction tr = session.beginTransaction();
	   genero = new Genero("SCIFI", "Ciencia ficcion");
	   HibernateGeneroDAO dao =  new HibernateGeneroDAO();
	   dao.saveOrUpdate(genero);
	   genero = new Genero("DRAMA", "drama");
	   dao.saveOrUpdate(genero);
	   genero = new Genero("WESTERN", "western");
	   dao.saveOrUpdate(genero);
	   tr.commit();
	}
	
	@Test
	public void type() throws Exception {
		assertThat(HibernatePeliculaDAO.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		HibernatePeliculaDAO target = new HibernatePeliculaDAO();
		assertThat(target, notNullValue());
	}

	@Test
	public void testGetPeliculas() throws Exception {
		Session session = HibernateUtils.getSession();
		Transaction tr = session.beginTransaction();
		try {
		Pelicula pelicula = new Pelicula("ISAN01", "pelicula1", null, "sinopsis pelicula1", 110, 2012, genero);
		hibernatePeliculaDAO.saveOrUpdate(pelicula);
		Collection<Pelicula> actual = hibernatePeliculaDAO.getPeliculas();
		Collection<Pelicula> expected = Arrays.asList(pelicula);
		assertThat(actual, is(equalTo(expected)));
		hibernatePeliculaDAO.delete(pelicula);
		tr.commit();
		} catch(Exception e) {
			tr.rollback();
		}
	}

	@Test
	public void testGetPeliculaByISAN() throws Exception {
		Session session = HibernateUtils.getSession();
		Transaction tr = session.beginTransaction();
		try {
		Pelicula expected = new Pelicula("ISAN01", "pelicula1", null, "sinopsis pelicula1", 110, 2012, genero);
		hibernatePeliculaDAO.saveOrUpdate(expected);
	
		String isan = "ISAN01";
		Pelicula actual = hibernatePeliculaDAO.getPeliculaByISAN(isan);
		assertThat(actual, is(equalTo(expected)));
		hibernatePeliculaDAO.delete(expected);
		tr.commit();
		} catch(Exception e) {
			tr.rollback();
		}

	}

	@Test
	public void getPeliculasByGenero() throws Exception {
		Session session = HibernateUtils.getSession();
		Transaction tr = session.beginTransaction();
		try {
			Pelicula expected = new Pelicula("ISAN01", "pelicula1", null, "sinopsis pelicula1", 110, 2012, genero);
			hibernatePeliculaDAO.saveOrUpdate(expected);
		
			HibernatePeliculaDAO target = new HibernatePeliculaDAO();
			String generoCod = genero.getCodigo();
					;
			Collection<Pelicula> actual = target.getPeliculasByGenero(generoCod);
			assertThat(actual, is(equalTo((Collection)Arrays.asList(expected))));
	
			hibernatePeliculaDAO.delete(expected);
			tr.commit();
		} catch(Exception e) {
			tr.rollback();
		}

	}

	

}
